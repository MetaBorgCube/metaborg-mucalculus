module statics/mucalculus

rules

  init ^ (scope) := new scope.

  [[ True() ^ (_) ]].
  [[ False() ^ (_) ]].
  
  [[ Var(v) ^ (scope) ]] :=
    Variable{v} -> scope,
    Variable{v} |-> w | error $[Found free variable [v]].
    
  [[ DataValExpression(e) ^ (scope) ]].
    
  [[ Negation(f) ^ (scope) ]] :=
    [[ f ^ (scope) ]].
    
  [[ And(f, g) ^ (scope) ]] :=
    [[ f ^ (scope) ]],
    [[ g ^ (scope) ]].
  [[ Or(f, g) ^ (scope) ]] :=
    [[ f ^ (scope) ]],
    [[ g ^ (scope) ]].
    
  [[ Implies(f, g) ^ (scope) ]] :=
    [[ f ^ (scope) ]],
    [[ g ^ (scope) ]].
    
  [[ Diamond(a, f) ^ (scope) ]] :=
    [[ f ^ (scope) ]].
  [[ Box(a, f) ^ (scope) ]] :=
    [[ f ^ (scope) ]].
  
  [[ Forall(d, f) ^ (scope) ]] :=
    [[f ^ (scope) ]].
  [[ Exists(d, f) ^ (scope) ]] :=
    [[f ^ (scope) ]].
    
  [[ Mu(v, d, f) ^ (scope) ]] :=
    Variable{v} <- scope,
    [[ f ^ (scope) ]].
  [[ Nu(v, d, f) ^ (scope) ]] :=
    Variable{v} <- scope,
    [[ f ^ (scope) ]].
