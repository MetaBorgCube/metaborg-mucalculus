module mucalculus/Formula

imports

  mucalculus/Layout
  mucalculus/Common
  mcrl2/Reserved
  mcrl2/Common
  mcrl2/Data
  mcrl2/Sort

lexical syntax

  Variable = [A-Z]

context-free syntax

  Action = MCRL2-ID
  
  DataValExpression.DataValExpression = [val([MCRL2-DataExpr])]
  
  DataExprList.DataExprList = [([{MCRL2-DataExpr ","}+])]
  DataVarAssignment.DataVarAssignment = [[MCRL2-ID] : [MCRL2-SortExpr] = [MCRL2-DataExpr]]
  DataVarAssignmentList.DataVarAssignmentList = [([{DataVarAssignment ","}+])]
  
  //Action formula
  ActionFormula.ActTrue = [true]
  ActionFormula.ActFalse = [false]
  ActionFormula = DataValExpression
  
  ActionFormula.Action = Action
  
  ActionFormula.ActForall = [forall [{MCRL2-VarsDecl ", "}+].[ActionFormula]]
  ActionFormula.ActExists = [exists [{MCRL2-VarsDecl ", "}+].[ActionFormula]]
  
  ActionFormula.ActNegation = [![ActionFormula]]
  ActionFormula.ActAnd = [[ActionFormula] && [ActionFormula]] {right}
  ActionFormula.ActOr = [[ActionFormula] || [ActionFormula]] {right}
  ActionFormula.ActImplies = [[ActionFormula] => [ActionFormula]] {right}
  
  ActionFormula = [([ActionFormula])] {bracket}
  
  //Regular formula
  RegularFormula = ActionFormula
  
  RegularFormula.Alt = [[RegularFormula] + [RegularFormula]] {left}
  RegularFormula.Seq = [[RegularFormula].[RegularFormula]] {right}
  
  RegularFormula.TRClosure = [[RegularFormula]*]
  RegularFormula.TClosure = [[RegularFormula]+]
  
  RegularFormula = [([RegularFormula])] {bracket}
  
  //State formula
  StateFormula.True = [true]
  StateFormula.False = [false]
  StateFormula.Var = [[Variable][DataExprList?]]
  StateFormula = DataValExpression
  
  StateFormula.Negation = [![StateFormula]]
  StateFormula.And = [[StateFormula] && [StateFormula]] {right}
  StateFormula.Or = [[StateFormula] || [StateFormula]] {right}
  StateFormula.Implies = [[StateFormula] => [StateFormula]] {right}
  
  StateFormula.Diamond = [<[RegularFormula]>[StateFormula]]
  StateFormula.Box = <[<RegularFormula>]<StateFormula>>
  
  StateFormula.Forall = [forall [{MCRL2-VarsDecl ", "}+].[StateFormula]]
  StateFormula.Exists = [exists [{MCRL2-VarsDecl ", "}+].[StateFormula]]
  
  StateFormula.Mu = [mu [Variable][DataVarAssignmentList?].[StateFormula]]
  StateFormula.Nu = [nu [Variable][DataVarAssignmentList?].[StateFormula]]
  
  StateFormula = [([StateFormula])] {bracket}
  
template options

  keyword -/- [a-zA-Z]
  
context-free priorities

     // 26
     {ActionFormula.ActNegation}
     // 24
   > {ActionFormula.ActAnd}
     // 23
   > {ActionFormula.ActOr}
     // 22
   > {ActionFormula.ActImplies}
     // 21
   > {ActionFormula.ActForall ActionFormula.ActExists},

     // 33
     {RegularFormula.TRClosure RegularFormula.TClosure}
     // 32
   > {RegularFormula.Seq}
     // 31
   > {RegularFormula.Alt},

     // 47
     {StateFormula.Negation}
     // 46
   > {StateFormula.Diamond StateFormula.Box}
     // 45
   > {StateFormula.And}
     // 44
   > {StateFormula.Or}
     // 43
   > {StateFormula.Implies}
     // 42
   > {StateFormula.Forall StateFormula.Exists}
     // 41
   > {StateFormula.Mu StateFormula.Nu}
