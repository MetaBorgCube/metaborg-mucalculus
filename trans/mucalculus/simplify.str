module mucalculus/simplify

imports

  mucalculus/pp
  mucalculus/util
  signatures/mucalculus-sig
  signatures/mcrl2/Data-sig

strategies

  editor_simplify = editor-action-prettyprinted(simplify_strategy ; pp-debug | "simplified")
  
  editor_simplify_ast = editor-action(simplify_strategy | "simplified.aterm")
  
  simplify_strategy = remove_negation_strategy ; state_formula_strategy

  state_formula_strategy = bottomup(try(state_formula_simplify))
  
  remove_negation_strategy = topdown(try(remove_negation))
  
rules

  //BOOLEAN SIMPLIFICATION
  boolean_simplify: Or(True(), _) -> True()
  boolean_simplify: Or(_, True()) -> True()
  boolean_simplify: And(False(), _) -> False()
  boolean_simplify: And(_, False()) -> False()
  boolean_simplify: Or(False(), f) -> f
  boolean_simplify: Or(f, False()) -> f
  boolean_simplify: And(True(), f) -> f
  boolean_simplify: And(f, True()) -> f
  //todo: idempotence
  
  boolean_simplify: Implies(True(), f) -> f
  boolean_simplify: Implies(False(), _) -> True()
  boolean_simplify: Implies(_, True()) -> True()
  boolean_simplify: Implies(f, False()) -> g
    with g := <try(boolean_simplify)> Negation(f)
  
  //STATEFORMULA SIMPLIFICATION
  state_formula_simplify = boolean_simplify
  
  state_formula_simplify: Diamond(a, False()) -> False()
  state_formula_simplify: Box(a, True()) -> True()
  state_formula_simplify: Diamond(ActFalse(), f) -> False()
  state_formula_simplify: Box(ActFalse(), f) -> True()
  
  state_formula_simplify: Forall(d, f) -> result
  where
    d' := <remove_unused_vars> (d, f);
    result := <if(<?[]> d', !f, !Forall(d', f))>
  state_formula_simplify: Exists(d, f) -> result
  where
    d' := <remove_unused_vars> (d, f);
    result := <if(<?[]> d', !f, !Exists(d', f))>
  
  state_formula_simplify: Mu(v, d, Var(v, d')) -> False()
  state_formula_simplify: Nu(v, d, Var(v, d')) -> True()
  state_formula_simplify: Mu(v, d, f) -> result
  where
    d' := <remove_unused_vars_from_datavarassignments(|<collect(?DataRef(<id>))> f)> d;
    result := <if(<collect(?Var(v, _)) ; ?[]> f, !f, !Mu(v, d', f))>
  state_formula_simplify: Nu(v, d, f) -> result
  where
    d' := <remove_unused_vars_from_datavarassignments(|<collect(?DataRef(<id>))> f)> d;
    result := <if(<collect(?Var(v, _)) ; ?[]> f, !f, !Nu(v, d', f))>
  
  //NEGATION REMOVAL
  remove_negation: Negation(True()) -> False()
  remove_negation: Negation(False()) -> True()
  remove_negation: Negation(DataValExpression(e)) -> DataValExpression(Neg_SetCompl(e))
  
  remove_negation: Negation(Negation(f)) -> f
  
  remove_negation: Negation(And(f, g)) -> Or(Negation(f), Negation(g))
  remove_negation: Negation(Or(f, g)) -> And(Negation(f), Negation(g))
  
  remove_implication: Implies(f, g) -> Or(Negation(f), g)
  remove_negation = remove_implication
  
  remove_negation: Negation(Diamond(a, f)) -> Box(a, Negation(f))
  remove_negation: Negation(Box(a, f)) -> Diamond(a, Negation(f))
  
  remove_negation: Negation(Forall(d, f)) -> Exists(d, Negation(f))
  remove_negation: Negation(Exists(d, f)) -> Forall(d, Negation(f))
  
  remove_negation: Negation(Mu(v, d, f)) -> Nu(v, d, Negation(g))
  with (g) := <alltd(negate_var(|v))> (f)
  remove_negation: Negation(Nu(v, d, f)) -> Mu(v, d, Negation(g))
  with (g) := <alltd(negate_var(|v))> (f)
    
  negate_var(|v): Var(w, d) -> Negation(Var(w, d))
  where <eq>(<strip-annos> v, <strip-annos> w)
  
  
  //MONOTONICITY CHECK
  //each variable must have an even number of negations in its scope
  //this is done by working the negation inwards and then check whether negated variables exist
  //TODO: only check this for variables declared in a fixpoint operator
  nabl2-custom-analysis-unit-hook: (_, ast, _) -> errors*
    with
      error_vars := <remove_negation_strategy ; collect-all(?Negation(Var(_, _))) > ast;
      errors* := <map(\ Negation(n@Var(v, _)) -> (n, $[Variable [v] has an uneven number of negations in its scope]) \)> error_vars

  nabl2-custom-analysis-final-hook(|a): (_, _, custom-unit-results) -> (errors*, warnings*, notes*, [])
    with
      errors*   := <flatten-list> custom-unit-results;
      warnings* := [];
      notes*    := []
  
