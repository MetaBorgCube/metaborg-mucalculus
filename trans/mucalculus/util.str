module util

imports

  signatures/mucalculus-sig
  signatures/mcrl2/Data-sig

rules

  editor-action(f|extension): (node, _, _, path, _) -> (filename, result)
    with
      filename := <guarantee-extension(|extension)> path
    ; result   := <f> node

  editor-action-prettyprinted(f|op): (node, _, _, path, _) -> (filename, prettyprinted)
    with
      ext           := <get-extension> path
    ; filename      := <guarantee-extension(|$[[op].[ext]])> path
    ; prettyprinted := <f> node
  
  remove_unused_vars_from_varsdecl(|used_vars): VarsDecl(vars, type) -> result
  where
    vars' := <filter(\ v -> v where <elem> (v, used_vars) \)> vars;
    result := <if(<?[]> vars', ![], ![VarsDecl(vars', type)])>

  remove_unused_vars: (varsdecls, f) -> <mapconcat(remove_unused_vars_from_varsdecl(|used_vars))> varsdecls
  where
    used_vars := <collect(?DataRef(<id>))> f
  
  remove_unused_vars_from_datavarassignments(|used_vars): None() -> None()
  remove_unused_vars_from_datavarassignments(|used_vars): Some(DataVarAssignmentList(assignments)) -> result
  where
    assignments' := <filter(\ a@DataVarAssignment(v, t, i) -> a where <elem> (v, used_vars) \)> assignments;
    result := <if(<?[]> assignments', !None(), !Some(DataVarAssignmentList(assignments')))>
